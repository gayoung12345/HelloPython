# lambda 인자 : 표현식

# 두 수를 더하는 함수
def hap(x, y):
    return x + y

print(hap(10, 20)) # 30 출력

# 위의 함수를 람다식으로 변경
print((lambda x,y: x + y)(10, 20)) # 30 출력


# map(함수, 리스트)
# 리스트로부터 원소를 하나씩 꺼내 함수에 적용시킨 다음, 결과를 새로운 리스트에 저장

print( list(map(lambda x : x ** 2, range(5))) ) # [0, 1, 4, 9, 16] 출력
# 인자로 받는 함수 => lambda x: x**2 (x는 x의2제곱) 
# 인자로 받는 리스트 => range(5) == [0, 1, 2, 3, 4]
# 즉, [0, 1, 2, 3, 4] 리스트의 원소를 제곱한 값을 새로운 리스트에 저장


# fiter(함수, 리스트)
# 리스트로부터 원소를 하나씩 꺼내 함수에 적용시킨 다음, 결과값이 참인 값으로만 새로운 리스트에 저장

# 0~9 리스트 중에 5보다 작은 것만 return
print( list(filter(lambda x: x < 5, range(10))) ) # [0, 1, 2, 3, 4] 출력
# 인자로 받는 함수 => lambda x: x < 5 (x는 5보다 작음)
# 인자로 받는 리스트 => range(10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# 즉, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 리스트의 원소 중에서 5보다 작은 값으로만 새로운 리스트에 저장

# 홀수만 return
print( list(filter(lambda x: x % 2, range(10))) ) # [1, 3, 5, 7, 9] 출력
# 인자로 받는 함수 => lambda x: x % 2 (x는 x를 2로 나눈 나머지)
# 인자로 받는 리스트 => range(10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# 1은 '참'이고, 0은 '거짓'
# 즉, 나머지가 1인 홀수는 참이 되므로 필터를 통과해 새로운 리스트에 저장되지만 나머지가 0인 짝수는 거짓이 되므로 필터에 걸러짐


# reduce(함수, 시퀀스)
# 시퀀스(문자열, 리스트, 튜플)의 원소들을 누적해서 함수에 적용

from functools import reduce # python3에서는 사용해야함
print( reduce(lambda x, y: x + y, [0, 1, 2, 3, 4]) ) # 10 출력
# 인자로 받는 함수 => lambda x, y: x + y (x와 y를 더함)
# 인자로 받는 시퀀스(여기서는 리스트) => [0, 1, 2, 3, 4]
# 리스트의 가장 첫번째 인자인 0과 두번째 인자인 1을 더하고, 그 결과값에 세번째 인자인 2를 더하고, 그 결과 값에 네번째 인자..
# 즉 모든 인자를 누적해서 더함 